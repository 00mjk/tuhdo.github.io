#+TITLE: Emacs Mini Manual (PART 3) - CUSTOMIZING AND EXTENDING EMACS
* Whny customize and extend Emacs?
:PROPERTIES:
:ID:       84576135-507c-41ad-b122-2dd498235ecf
:END:
Emacs comes with a default settings. Some interesting features are
disabled and hidden, i.e. Ibuffer, Semantic, electric
modes... Probably to make it more user friendly to new users and
behave more like "normal" editors, i.e. Normal users do not expect
automatic pairing of punctuation marks like parentheses, brackets,
curly brackets...

Because the nature of Emacs is an extensible system, people write
extensions to improve Emacs and share with others. The extensions
improve various aspects of Emacs: Improve and add editing features,
integrate 3rd party tools, add programming languages supports, change
Emacs appearance... Without the ability to extend, Emacs will just be
another obscure editor with some useful features but cannot meet the
demands of people, because different people have different needs, and
Emacs maintainers cannot provide them all and integrate all into
Emacs. With the extensibility, people can bend Emacs the way they
want, much like Lisp.

Unlike other editors which encourage users to stay with the default as
much as they can, Emacs encourages users to customize and extend Emacs
as much as they can.
* Just enough Emacs Lisp (and Lisp in general)
:PROPERTIES:
:ID:       267fa5b6-b998-42c6-8ec0-382035284873
:END:
In this section, you only need to read and understand. It's important
that you understand the core ideas. After you finish the sub-sections
of this section, we will play with Emacs Lisp code for customizing
Emacs, and it's really fun to see your Emacs "evolves" gradually.
** Commonly used functions and patterns for configuration
:PROPERTIES:
:ID:       e54be9d4-bce0-428e-94be-c137bdc0de11
:END:

- Function: =(global-set-key /KEY/ /COMMAND/)=

  *_Example_*:
   
  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer) ;; bind "C-x C-b" to ibuffer command
    (global-set-key "\C-x\C-b" 'ibuffer)  ;; bind "C-x C-b to ibuffer command, but modifier 
                                          ;; keys must be escaped with the backslash
    (global-set-key [?\C-x?\C-b] 'ibuffer) ;; use vector instead of a string
  #+end_src
   
  I recommend you to use =(kbd ...)= function because we can write key
  bindings using our familiar key notations without adding unnecessary
  characters. Vector is array in other languags. Vector was used for
  mapping function keys, such as =[left]=, =[right]=, =[up]=, =[down]=,
  =[f1]...[f12]=. But now, you can also map function keys in =(kbd
  ...)= function using angle brackets:
   
  #+begin_src emacs-lisp
    (global-set-key (kbd "<f3>") 'kmacro-start-macro-or-insert-counter)0
  #+end_src
   
  Here are common function keys: 
   
  | Key                                              | Description                                        |
  |--------------------------------------------------+----------------------------------------------------|
  | =left, up, right, down=                          | Cursor arrow keys                                  |
  |--------------------------------------------------+----------------------------------------------------|
  | =begin, end, home, next, prior=                  | Other cursor repositioning keys                    |
  |                                                  | =prior= means =PageUp=                             |
  |                                                  | =next= means =PageDOwn=                            |
  |--------------------------------------------------+----------------------------------------------------|
  | =select, print, execute, backtab=                | Miscellaneous keys                                 |
  | =insert, undo, redo, clearline=                  | =backtab= means =S-TAB= or =C-iso-tab=             |
  | =insertline, deleteline, insertchar, deletechar= |                                                    |
  |--------------------------------------------------+----------------------------------------------------|
  | =f1, f2, ... F35=                                | Numbered function keys on top of your keyboard     |
  |--------------------------------------------------+----------------------------------------------------|
  | =kp-add, kp-subtract, kp-multiply, kp-divide=    | Keypad keys (to the right of the regular keyboard) |
  | =kp-backtab, kp-space, kp-tab, kp-enter=         | , with names or punctuation.                       |
  | =kp-separator, kp-decimal, kp-equal=             |                                                    |
  |                                                  |                                                    |
  | =kp-0, kp-1, ... kp-9=                           | Keypad keys with digits.                           |
  |                                                  |                                                    |
  | =kp-f1, kp-f2, kp-f3, kp-f4=                     | Keypad PF keys.                                    |
  |--------------------------------------------------+----------------------------------------------------|
   
  *_Built-in description_*:
   
  #+BEGIN_QUOTE
  Give /KEY/ a global binding as /COMMAND/.
  /COMMAND/ is the command definition to use; usually it is
  a symbol naming an interactively-callable function.
  /KEY/ is a key sequence; noninteractively, it is a string or vector
  of characters or event types, and non-ASCII characters with codes
  above 127 (such as ISO Latin-1) can be included if you use a vector.
   
  Note that if /KEY/ has a local binding in the current buffer,
  that local binding will continue to shadow any global binding
  that you make with this function.
  #+END_QUOTE
   
- Function: =(global-unset-key /KEY/)=
  *_Example_*:

  #+begin_src emacs-lisp
    (global-unset-key (kbd "C-x b"))
    (global-set-key (kbd "C-x b a") 'switch-to-buffer)
    (global-set-key (kbd "C-x b b") 'ibuffer)
  #+end_src
  
  *_Comment_*: A function to unset a key in global keymap. It's useful
  if you want to turn a key binding into a prefix key. For example,
  =C-x m= binding is =compose-mail=. But for example, you want to bind
  =C-x b a= to =switch-to-buffer= and =C-x b b= to =ibuffer=, two commands of your
  choice (this is just an example; you should use these bindings). To
  do that, first you have to unset =C-x m=; only then, you will be
  able to bind the keys. Otherwise, Emacs won't allow because
  prefix key =C-x b= is alreay used to something else. Try the above
  example with *C-x e*. To get your old bindings back, execute this
  snippet:

  #+begin_src emacs-lisp
    (global-unset-key (kbd "C-x b a"))
    (global-unset-key (kbd "C-x b b"))
    (global-set-key (kbd "C-x b") 'switch-to-buffer)
  #+end_src

  *_Built-in description_*:
  #+BEGIN_QUOTE
  (global-unset-key /KEY)

  Remove global binding of /KEY/.
  /KEY/ is a string or vector representing a sequence of keystrokes.
  #+END_QUOTE

- Function: =(define-key /KEYMAP/ /KEY/ /DEF/)=
  
  *_Example_*:
  

** Configuration collector
:PROPERTIES:
:ID:       31381170-81ba-413a-8b3e-b701bd62c30c
:END:

* Useful built-in key bindings for navigating pairs
:PROPERTIES:
:ID:       1a1248d4-2a59-4c80-a5c5-e471adc40c8f
:END:

| Key         | Binding                                  |
|-------------+------------------------------------------|
| =C-M-f=     | *Command*: =forward-sexp=                |
|             | Move forward over a balanced expression  |
|             | ...[screenshot]...                       |
|-------------+------------------------------------------|
| =C-M-b=     | *Command*: =backward-sexp=               |
|             | Move backward over a balanced expression |
|             | ...[screenshot]...                       |
|-------------+------------------------------------------|
| =C-M-k=     | *Command*: =kill-sexp=                   |
|             | Kill balanced expression forward         |
|             | ...[screenshot]...                       |
|-------------+------------------------------------------|
| =C-M-t=     | *Command*: =transpose-sexps=             |
|             | Transpose expressions                    |
|             | ...[screenshot]...                       |
|-------------+------------------------------------------|
| =C-M-<SPC>= | *Command*: =mark-sexp=                   |
| =C-M-@=     | Put mark after following expression      |
|             | ...[screenshot]...                       |
|-------------+------------------------------------------|

* Let's supercharge Emacs
:PROPERTIES:
:ID:       8d44370b-5ab7-40fc-9a72-1ef9dc66ffd2
:END:
Throughout this section I will help you to extend Emacs with packages
that improves general Emacs features, such as Info, Dired, buffer
management... I will introduce you popular packages out there, but I
cannot present you all. The purpose of this guide is to help you get
really comfortable to Emacs package system, so you can extend Emacs
with packages from other people easily to fit your need. Writing your
own Emacs extension is a differnt story, and is beyond the scope of
this guide.

I will introduce packages specialized for programming in later part: how
to setup programming environment for popular languages (C/C++, Lisp,
Python, Ruby...); each programming environment will have its own
chapter. In this part of the mini manual series, I only introduce
general packages for extending Emacs in various aspects. And you are
going to need some of these packages to setup your specialized
programming envrionment, so don't skip it.

Don't be intimidated if you see many packages down there. Adding
packages and see it extends your Emacs is fun and addictive, like 
playing video games.

To remind you, Emacs always loads one of the three of the following
files when it starts:

- ~/.emacs
- ~/.emacs.d/init
- ~/.emacs.d/init.el

To apply a setting, move point to the end of a Lisp expression and
*C-x C-e*, which runs =eval-last-sexp=.

When you want to complete function names in Emacs Lisp: *C-M-i*,
which runs =completion-at-point=. It will display a list of possible
candidates available in Emacs. As a reminder, if you want to quickly
complete some text, you can *M-/*, which runs =dabbrev-expand=. 

If a package uses new functions, I will introduce the functions in its
own sections just before we get to that package. I will only introduce
the basic usage of the functions. If you want to understand more, *C-h
f* and enter name of the function. All of the quoted function
descriptions are taken from *C-h f*. If you forget what a function
does and how to use it, *C-h f* to find out. Really, you should get
used to getting help from Emacs.

** How to use Emacs package manager
:PROPERTIES:
:ID:       d0b0f0d6-3662-4be3-84e7-342735015170
:END:
Emacs has a package manager to make the task of installing, update and
removing easier, as well as inform users new packages created by the
community. Emacs gets a list of packages from sources, called package
archive. Package archive is the same as repository in
Linux. Currently, there are 3 package archives in Emacs: 

- built-in: limited number of packages, and not always up to date.
- Marmalade: more packages, but mostly outdated since people moved to MELPA.
- MELPA: the most popular and most up to date package archive, with
  most number of packages.

Marmalade and MELPA are not activated by default; you have to add them
manually. You only need to setup MELPA and that's enough to get all
the packages described in later sections. Add this code snippet to your
=~/.emacs.d/init.el=:

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
    '("melpa" . "http://melpa.milkbox.net/packages/") t)
#+end_src

Then, evaluate those two expressions with *C-x C-e* or =eval-buffer=.

To open the package manager, =M-x list-package=. You will see a list
of packages. 

- To navigate the package list down and up using *n* and *p*. 
- To view information of a package, press *RET*. 
- To mark a package for install, press *i*.
- To mark a package for delete, press *d*.
- To unmark a package, press *u*.
- To execute the marked packages (either for install or delete), press *x*.
- To referesh and update the lastest package list, press *r*.
- To display these key bindings, press *h*.

That's that.

*_Exercise_*: Let's install a few packages in advance, so you won't
have to install the packages later. Install these packages:

- volatile-highlights
- clean-aindent-mode
- undo-tree
- yasnippet

** Customize Emacs
:PROPERTIES:
:ID:       b72e8ff3-8924-4cbb-99e5-fa24d70d09fe
:END:
*** Using GUI
:PROPERTIES:
:ID:       a5d94712-f14d-4b1d-9780-f40a20606813
:END:
You wonder, there are so many variables to set. How do you know which
to which? Luckily, you don't have to manually guess which variable to
set. Emacs has a command for setting Emacs internally, with a nice
organization of settings, rather than randomly set a variable that you
randomly found. =M-x customize= to open a window for customizing
Emacs:

...[screenshol]...

You will see various categories for customizing Emacs. These
categories are called *Customization Groups* in Emacs. Let's try
setting something in Emacs: 

- Go to *Editing* -> *Editing Basics* -> move point to "Global
Mark ring Max: ".
- Change the value to 5000.
- Move point on *State* button. Press *RET*.
- A menu appears with the following choice:

=0 = Set for current Sesssion=
...[screenshol]...
This option is for trying out a new setting. If you close Emacs, the
old setting is restored.

=1 = Save for Future Sesssions=
...[screenshol]...
This option saves the new value permanently, so the next time you
start Emacs, it uses your saved setting. The new value is saved at
=~/.emacs.d/init.el= like this:

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(global-mark-ring-max 5000))
#+end_src

=2 = Undo Edits=
...[screenshol]...
Undo to the previous value of a particular setting, if you haven't
set.

=3 = Revert This Sesssion's Customization=
...[screenshol]...
This restores the value of the variable to the last saved value, and
updates the text accordingly.

=4 = Erase Customization=
...[screenshol]...
Reset to standard value and delete set value in =~/emacs.d/init.el=.

=7 = Add Comment=
...[screenshol]...
Someimtes you have something to say about your customization. Write it
using this option. You customized variable will have 

=: = Show Saved Lisp Expression=
...[gif screenshol]...

Show the actual variable representation. If you open the menu again,
the option =: = Show Saved Lisp Expression= is changed to =Show
current value= that switches back to the nicer representation.


Here is the whole process of customizing a setting:

...[gif screenshot]....

Another way to change a setting is using *C-h v*, which runs
=describe-variable= that list all the avaialble variables in your
Emacs and allow you to select one.

....[screenshot]...

You can also access the parent group of a group or a variable.
*** Using =setq=
:PROPERTIES:
:ID:       24fade09-4735-4f0b-ba82-5742d3b5a314
:END:
The above approach uses GUI, which makes Emacs look familar to normal
users from other editors: using GUI to change the editors. However, it
has disadvantages: Monolithic. Although the settings are nicely
organized into groups, its underlying representation is not. After you
set and save something in whatever group, Emacs always add your
setting to the function =custom-set-variables= like this:

#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(global-mark-ring-max 5000 nil nil "test"))
#+end_src

As you can read it the comment, =custom-set-variables= is expected to
be unique in your init file. If you have more, things go wrong. So, by
design, you cannot split the settigns into logical groups of your
choice.

For that reason, =setq= is the preferred method. But, you can use the
GUI with nice and logical grouping to guide you to the variables you
want to change. The grouping is nice, and for consistency, we should
organize our module structure based on the grouping in =M-x customize=:

- setup-editing.el for =Editing= group.
- setup-convenience.el for =Convenience= group.
- setup-files.el for =Files= group.
- setup-data.el for =Data= group.
- setup-help.el for =Help= group.

Those are the groups I will cover in this part, including packages for
improving those groups. If a sub-group exists within a group, there
two possibilities:

- The sub-group contains only "terminals"; that is, it has no inner
  sub-group. In this case, you change the subgroup variables directly
  inside the parent-group file. For example, the sub-group *Editing*
  -> *Electricity* belongs to *Editing*, and inside *Electricity* contains
  only variables. In this case, you write =(setq ...)= statements
  directly inside =setup-editing.el=, which is the file for =Editing=
  group.

- The sub-group contains many inner sub-group (more than 3). In this
  case, you should create a file for that sub-group:
  *setup-<sub-group>.el*, and load from the file of parent group. For
  example, *Files* -> *Dired* sub-group contains many sub-groups
  inside it. You should create a *setup-dired.el* and load it from
  *setup-files.el*. However, if you only need a few options for
  a few inner sub-groups, then don't create a file because it's not
  worth it. 

*_Exercise_*: 

- Create a directory: =~/.emacs.d/custom/=
- Create the above =setup-*.el= files under it.
- For each file, add its appropriate group. Add a comment at start of
  each file, noting which group this file belongs to. For example:

  #+begin_src emacs-lisp
    ;;
    ;; GROUP: Editing
    ;;
  #+end_src

** Function: =(setq [ /SYM/ /VAL/ ]...)=
:PROPERTIES:
:ID:       3da16e32-a1d6-4b47-916b-3d845a06067e
:END:
  *_Comment_*: A really fundamental function for customizing Emacs
  settings. An Emacs setting is really just a variable. Emacs has GUI
  for changing setting, but =setq= a variable is also equivalent.

  *_Example_*:
  #+begin_src emacs-lisp
    (setq global-mark-ring-max 50000)
  #+end_src

  *_Built-in descriptions_*:
  #+BEGIN_QUOTE
  Set each /SYM/ to the value of its /VAL/.
  The symbols /SYM/ are variables; they are literal (not evaluated).
  The values /VAL/ are expressions; they are evaluated.
  Thus, (setq x (1+ y)) sets `x' to the value of `(1+ y)'.
  The second /VAL/ is not computed until after the first /SYM/ is set, and so on;
  each VAL can use the new value of variables set earlier in the `_setq_'.
  The return value of the `_setq_' form is the value of the last /VAL/.
  #+END_QUOTE

** Function: =(load /FILE/ &optional /NOERROR/ /NOMESSAGE/ /NOSUFFIX/ /MUST-SUFFIX/)=
:PROPERTIES:
:ID:       525cbba2-a7dd-46aa-8215-bfb52502a4ac
:END:
  *_Comment_*: This function allows you to load a file. /FILE/ is the
  filepath. Do you notice =&optional= keyword? When you see this
  keyword, it means everything after =&optional= is, optional. The
  parameters /NOERROR/, /NOMESSAGE/, /NOSUFFIX/, /MUST-SUFFIX/ are not
  required to be passed into the function if you don't need. However,
  if you want to pass an argument into the place of one a parameter,
  you must also pass arguments to all the parameters to the left of
  your chosen parameter. For example, if you want to pass an argument
  into /NOSUFFIX/, you are *required* to pass arguments into
  /NOERROR/, /NOMESSAGE/ first. You are safe to ignore everything
  after your chosen parameter, and in our example, it's /MUST-SUFFIX/.

  *_Example_*: 

  #+begin_src emacs-lisp
    (load (substitute-in-file-name "$HOME/.emacs.d/module")) ;; first try to load module.elc; if not found, try to load module.el
    (load (substitute-in-file-name "$HOME/.emacs.d/module.el")) ;; only load module.el
    (load (substitute-in-file-name "$HOME/.emacs.d/module.elc")) ;; only load module.elc
  #+end_src
   
  *_Built-in description_*:
   
  #+BEGIN_QUOTE
  Execute a file of Lisp code named FILE.
  First try FILE with `.elc' appended, then try with `.el', then try
  FILE unmodified (the exact suffixes in the exact order are determined
  by `load-suffixes').  Environment variable references in FILE are
  replaced with their values by calling `substitute-in-file-name'. This
  function searches the directories in `load-path'. 
   
  ....(*C-h f* for more information)...
  #+END_QUOTE

** Function: =(require /FEATURE/ &optional /FILENAME/ /NOERROR/)=
:PROPERTIES:
:ID:       dffde709-1810-4253-861a-8e058608a88c
:END:
*_Comment_*: If you install a package from =M-x list-packages=, to
load that package, use =(require 'installed-package)=.

*_Example_*: For example, you installed package =volatile-highlights=,
to load it:

#+begin_src emacs-lisp
  (require 'volatile-highlights)
#+end_src


*_Built-in description_*:

#+BEGIN_QUOTE
If feature /FEATURE/ is not loaded, load it from /FILENAME/.
If /FEATURE/ is not a member of the list `features', then the feature
is not loaded; so load the file /FILENAME/.
If /FILENAME/ is omitted, the printname of /FEATURE/ is used as the file name,
and `load' will try to load this name appended with the suffix `.elc' or
`.el', in that order.  The name without appended suffix will not be used.
See `get-load-suffixes' for the complete list of suffixes.
If the optional third argument /NOERROR/ is non-nil,
then return nil if the file is not found instead of signaling an error.
Normally the return value is /FEATURE/.
The normal messages at start and end of loading /FILENAME/ are suppressed.
#+END_QUOTE

** Macro: =(defun /NAME/ /ARGLIST/ &optional /DOCSTRING/ /DECL/ &rest /BODY/)=
:PROPERTIES:
:ID:       d8631984-db16-4ce6-89f4-f68b8edfc3f4
:END:
*_Comment_*: defun is a macro that allows you to define a function,
like any other language. A function is a collection of expressions to
be executed. The return value is the last expression.

*_Example_*:

- Create a normal function (Cannot be called from =M-x=):

#+begin_src emacs-lisp
  (defun demo (number string)
    (message "Print a number: %d, a string: %s" number string))
#+end_src

- Create a command (Can be called from =M-x=):
#+begin_src emacs-lisp
  (defun demo (number string)
    (interactive)
    (message "Print a number: %d, a string: %s" number string))
#+end_src

*_Built-in description_*:
#+BEGIN_QUOTE
Define /NAME/ as a function.
The definition is (lambda /ARGLIST/ [/DOCSTRING/] /BODY/...).
See also the function `interactive'.
/DECL/ is a declaration, optional, of the form (declare /DECLS...) where
/DECLS/ is a list of elements of the form (/PROP/ . /VALUES/).  These are
interpreted according to `defun-declarations-alist'.
The return value is undefined.
#+END_QUOTE
*** Special form: =(interactive &optional /ARGS/)=
:PROPERTIES:
:ID:       852f9233-a00c-4736-a627-f85d0fc1fb16
:END:



** setup-editing.el
:PROPERTIES:
:ID:       2f850290-6962-49f0-aea6-d735aa8bfbd9
:END:

  Let's use =setq= to change Emacs the way we want. You should type in
  the snippet below and use the completion key bindings until you get
  used to it.

  #+begin_src emacs-lisp
    ;;
    ;; MAIN GROUP: Editing
    ;;

    ;;
    ;; GROUP: Editing -> Editing Basics
    ;;

    ;; you can set a value to one variablea
    (setq
     global-mark-ring-max 5000
     mark-ring-max 5000
     mode-require-final-newline t
     tab-width 4)

    (delete-selection-mode)

    ;;
    ;; GROUP: Editing -> Electricity
    ;;

    ;; you can see these variables Eletricity group. However, these variables
    ;; are not for setting because setting them have no effect. You have to activate
    ;; command of the same name. If some variables are required to be activated through
    ;; commands, the description of those variables explicitly say so.
    (electric-indent-mode) ;; activate automatic indent when press RET
    (electric-pair-mode) ;; activate automatic paring

    ;; an example of association list, also an example of how to write a character
    ;; add more pairs if you want
    (setq electric-pair-pairs '(( ?\< . ?\>)))

    ;;
    ;; GROUP: Editing -> Killing
    ;;
    (setq
     kill-ring-max 5000 ;; increase kill-ring capacity
     kill-whole-line t) ;; if NIL, kill whole line and move the next line up

    ;;
    ;; GROUP: Editing -> Matching
    ;;

    ;; some variable automatically becomes buffer-local when set outside Custom
    ;; such as case-fold-search. To make your value of choice default, use setq-default
    ;; FIXME: Move this note to the beginning later

    ;;
    ;; GROUP: Editing -> Matching -> Paren Showing
    ;; As you can see, I only use a single option in the inner sub-group
    ;; It's not worth to create a file
    (show-paren-mode)
  #+end_src
*** Customize built-in functions
:PROPERTIES:
:ID:       a46d3a98-d481-41a3-8b15-50eb98c2e4ac
:END:
Sometimes, we want to adjust or improve the behaviours of some
commands in certain contexts. Consider this situataion: *C-a*, whicn
runs =move-beginning-of-line=, always move to the beginning of
line. However, sometimes we don't always to move to the beginning of 
line, but move to the first non-whitespace character of that line.

#+begin_src emacs-lisp
  (defun prelude-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first. If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  (global-set-key (kbd "C-a") 'prelude-move-beginning-of-line)
#+end_src

The code is taken from this article: [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][Smarter Navigation to the
Beginning of a Line]].

#+begin_src emacs-lisp
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single
  line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position)
             (line-beginning-position 2)))))

  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single
    line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))

  ;; kill a line, including whitespace characters until next non-whiepsace character
  ;; of next line
  (defadvice kill-line (before check-position activate)
    (if (member major-mode
                '(emacs-lisp-mode scheme-mode lisp-mode
                                  c-mode c++-mode objc-mode
                                  latex-mode plain-tex-mode))
        (if (and (eolp) (not (bolp)))
            (progn (forward-char 1)
                   (just-one-space 0)
                   (backward-char 1)))))

#+end_src


*** Package: =volatile-highlights=
:PROPERTIES:
:ID:       f8441653-b68d-4c18-8eb4-28ceff5739fc
:END:
*_Features_*:

VolatileHighlights highlights changes to the buffer caused by commands
such as ‘undo’, ‘yank’/’yank-pop’, etc. The highlight disappears at
the next command. The highlighting gives useful visual feedback for
what your operation actually changed in the buffer.

*_Installation_*:

=M-x list-packages= and select *volatile-highlights* package, then
install it. After finish installing, add this code snippet to activate
the package:

#+begin_src emacs-lisp
  (require 'volatile-highlights)
  (volatile-highlights-mode t)
#+end_src

*** Package: =clean-aindent-mode=
:PROPERTIES:
:ID:       49958ce7-6af0-47ac-b309-6ea75833f0e1
:END:
[[https://github.com/pmarinov/clean-aindent-mode][Homepage]]

*_Features_*:

When you press *RET* to create a newline and got indented by
=eletric-indent-mode=, you have appropriate whitespace for
indenting. But, if you leave the line blank and move to the next line,
the whitespace becomes useless. This package helps clean up unused
whitespace.

View this [[http://www.emacswiki.org/emacs/CleanAutoIndent][Emacswiki page]] for more details.

*_Installation_*:
=M-x list-packages= and select *clean-aindent-mode* package, then
install it. After finish installing, add this code snippet to activate
the package:

#+begin_src emacs-lisp
  (require 'clean-aindent-mode)
#+end_src

*** Package: =undo-tree=
:PROPERTIES:
:ID:       03030916-bb5c-4966-8fa1-68807b60bec2
:END:
*_Features:_*
*_Features_*: 

=undo-tree= allows you to visual the whole history of your editing in
a tree. It also provides regular undo/redo behaviours in other
editors. =undo-tree= can even provide a diff between two different states. Highly recommended. 

...[screenshot]...

*_Installation_*:
=M-x list-packages= and select *undo-tree* package, then
install it. After finish installing, add this code snippet to activate
the package:

#+begin_src emacs-lisp
  (require 'undo-tree)
  (global-undo-tree-mode)
#+end_src

From now on, your undo (*C-/*) behaves just like normal editor. To
redo, *C-_*.

*** Package: =yasnippet=
:PROPERTIES:
:ID:       bb1ea352-f9ea-47fe-bb3e-5727e542c481
:END:
*_Features_*:
YASnippet is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function
templates. Bundled language templates include: C, C++, C#, Perl,
Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is
inspired from TextMate's syntax, you can even import most TextMate
templates to YASnippet.

*_Installation_*:
=M-x list-packages= and select *yasnippet* package, then
install it. After finish installing, add this code snippet to activate
the package:

#+begin_src emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+end_src

*** Package: =expand-region=
:PROPERTIES:
:ID:       4c5acb48-c884-4720-a9c0-e25c2ee35296
:END:
[[https://github.com/magnars/expand-region.el][Homepage]]

*_Features_*:
=expand-region= allows you to select text objects incrementally. 

..[screenshot]...

*_Installation_*:
=M-x list-packages= and select *expand-region* package, then
install it. After finish installing, add this code snippet to activate
the package:

#+begin_src emacs-lisp
  (require 'expand-region)
  (global-set-key (kbd "M-m") 'er/expand-region)
#+end_src

I bind =er/expand-regin= to *M-m*, because the functionality is
included from the amended =beginning-of-line= we did above.

** Function: =(add-hook /HOOK/ /FUNCTION/ &optional /APPEND/ /LOCAL/)=
:PROPERTIES:
:ID:       b8a5ed88-f7b6-40b1-917d-1d7bbbca4213
:END:
*_Comment_*: A *hook* is a Lisp variable which holds a list of
functions, to be called on some well-defined occasion. (This is called
running the hook. You can search for hook using *C-h v* and enter
=-hook= suffix then *TAB*. Or you can find hooks in *Customization Groups*.

*_Example_*:

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+end_src

After you add the function =linum-mode= - which activates line number
on the left margin of your Emacs - then every time you enter a
=prog-mode=, which is the root all programming major modes derive
from. A programming mode can be =c-mode=, =asm-mode=,
=emacs-lisp-mode=, =java-mode=...

*_Built-in description_*:
#+BEGIN_QUOTE
Add to the value of HOOK the function /FUNCTION/.
/FUNCTION/ is not added if already present.
/FUNCTION/ is added (if necessary) at the beginning of the hook list
unless the optional argument /APPEND/ is non-nil, in which case
/FUNCTION/ is added at the end.

The optional fourth argument, /LOCAL/, if non-nil, says to modify
the hook's buffer-local value rather than its global value.
This makes the hook buffer-local, and it makes t a member of the
buffer-local value.  That acts as a flag to run the hook
functions of the global value as well as in the local value.

/HOOK/ should be a symbol, and /FUNCTION/ may be any valid function.  If
/HOOK/ is void, it is first set to nil.  If /HOOK/'s value is a single
function, it is changed to a list of functions.
#+END_QUOTE
** setup-convenience.el
:PROPERTIES:
:ID:       87f1578a-478c-48c3-afe4-a44ced18506d
:END:
Here is my sample customization:

#+begin_src emacs-lisp
  ;;
  ;; MAIN GROUP: Convenience
  ;;

  ;; GROUP: Convenience -> Revert

  ;; update any change made on file to the current buffer
  (global-auto-revert-mode)

  ;; GROUP: Convenience -> Hippe Expand
  ;; hippie-expand is a better version of dabbrev-expand.
  ;; While dabbrev-expand searches for words you already types, in current;; buffers and other buffers, hippie-expand includes more sources,
  ;; such as filenames, klll ring...
  (global-set-key (kbd "M-/") 'hippie-expand) ;; replace dabbrev-expand
  (setq
   hippie-expand-try-functions-list
   '(try-expand-dabbrev ;; Try to expand word "dynamically", searching the current buffer.
     try-expand-dabbrev-all-buffers ;; Try to expand word "dynamically", searching all other buffers.
     try-expand-dabbrev-from-kill ;; Try to expand word "dynamically", searching the kill ring.
     try-complete-file-name-partially ;; Try to complete text as a file name, as many characters as unique.
     try-complete-file-name ;; Try to complete text as a file name.
     try-expand-all-abbrevs ;; Try to expand word before point according to all abbrev tables.
     try-expand-list ;; Try to complete the current line to an entire line in the buffer.
     try-expand-line ;; Try to complete the current line to an entire line in the buffer.
     try-complete-lisp-symbol-partially ;; Try to complete as an Emacs Lisp symbol, as many characters as unique.
     try-complete-lisp-symbol) ;; Try to complete word as an Emacs Lisp symbol.
   )

  ;; GROUP: Convenience -> HL Line
  (global-hl-line-mode)

  ;; GROUP: Convenience -> Ibuffer
  (setq ibuffer-use-other-window t) ;; always display ibuffer in another window

  ;; GROUP: Convenience -> Linum
  (add-hook 'prog-mode-hook 'linum-mode) ;; enable linum only in programming modes

  ;; GROUP: Convenience -> Whitespace

  ;; whenever you create useless whitespace, the whitespace is highlighted
  (add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

  ;; activate whitespace-mode to view all whitespace characters
  (global-set-key (kbd "C-c w") 'whitespace-mode)

  ;; GROUP: Convenience -> Windmove

  ;; easier window navigation
  (windmove-default-keybindings)
#+end_src

*** Package: ibuffer-vc
:PROPERTIES:
:ID:       7b0b29a2-6a13-4b39-bbec-bb52ff97783b
:END:
...[add homepage]...
*_Features_*:

- Group your buffers by their parent vc root directory
- See the VC status of the associated files
- Sort buffers by their VC status

...[screenshot on homepage]...

*_Installation*:
=M-x list-packages= and select *ibuffer-vc* package, then install
it. After finish installing, add this code snippet to activate the
package:

#+begin_src emacs-lisp
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))

  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process)))
#+end_src

** setup-files.el
:PROPERTIES:
:ID:       a98a61ac-177b-4e5a-8096-03945a4406a9
:END:
*** Built-in: recentf
:PROPERTIES:
:ID:       9daec59b-8c5e-4712-955d-be3b3414ad83
:END:
My sample customization:

#+begin_src emacs-lisp
  ;,----
  ;| MAIN GROUP: Files
  ;`----

   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; GROUP: Files                      ;;
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq
   large-file-warning-threshold 100000000 ;; size in bytes
   )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; GROUP: Files -> Back up            ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defvar backup-directory "~/.backups")
  (if (not (file-exists-p backup-directory))
      (make-directory backup-directory t))
  (setq
   make-backup-files t        ; backup a file the first time it is saved
   backup-directory-alist '((".*" . backup-directory)) ; save backup files in ~/.backups
   backup-by-copying t     ; copy the current file into backup directory
   version-control t   ; version numbers for backup files
   delete-old-versions t   ; delete unnecessary versions
   kept-old-versions 6     ; oldest versions to keep when a new numbered backup is made (default: 2)
   kept-new-versions 9 ; newest versions to keep when a new numbered backup is made (default: 2)
   auto-save-default t ; auto-save every buffer that visits a file
   auto-save-timeout 20 ; number of seconds idle time before auto-save (default: 30)
   auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
   )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; GROUP: Files -> Dired              ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq
   dired-dwim-target t            ; if another Dired buffer is visibpple in another window, use that directory as target for Rename/Copy
   dired-recursive-copies 'always         ; "always" means no asking
   dired-recursive-deletes 'top           ; "top" means ask once for top level directory
   dired-listing-switches "-lha"          ; human-readable listing
   )

  ;; automatically refresh dired buffer on changes
  (add-hook 'dired-mode-hook 'auto-revert-mode)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; GROUP: Files -> Dired -> Wdired    ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (setq
   wdired-allow-to-change-permissions t   ; allow to edit permission bits
   wdired-allow-to-redirect-links     ; allow to edit symlinks
   )

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; GROUP: Files -> Recentf            ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (recentf-mode)
  (setq
   recentf-max-menu-items 30
   recentf-max-saved-items 5000
   )

#+end_src

*** Package: recentf-ext
:PROPERTIES:
:ID:       8013594a-f2f3-477c-820c-caf1354ac23d
:END:
*_Features_*:

Extension of `recentf' package.

- `dired' buffers can be handled.
- Switching to file buffer considers it as most recent file.

*_Installation_*:

=M-x list-packages= and select *recentf-ext* package, then install
it. After finish installing, add this code snippet to activate the
package:

#+begin_src emacs-lisp
  (require 'recentf-ext)
#+end_src

*** Package: ztree
:PROPERTIES:
:ID:       509e175b-8d72-472d-ad1c-7e96c647cb77
:END:
*_Features_*:

Ztree is a project dedicated to implementation of several text-tree
applications inside Emacs. It consists of 2 subprojects: ztree-diff
and ztree-dir(the basis of ztree-diff).

- ztree-diff: Perform diff on two directories. Really handy when you
  want to create a big patch between two directories.
...[screenshot]...
- ztree-dir: a simple tree explorer.
...[screenshot]...

*_Installation_*:
=M-x list-packages= and select *ztree* package, then install
it. After finish installing, add this code snippet to activate the
package:

#+begin_src emacs-lisp
  (require 'ztree-diff)
  (require 'ztree-dir)
#+end_src

*_Group_*: It has no group, but since it is related to files, we
consider it in "files" group.

** setup-development.el
:PROPERTIES:
:ID:       c46919c3-e9a0-4118-97e3-d5ad79159550
:END:


** setup-ui.el
:PROPERTIES:
:ID:       0c54618f-8c80-4f47-9cb7-a7003fab46ab
:END:

*** Chagning Emacs apperance
:PROPERTIES:
:ID:       25197681-292e-47d4-89ff-53658862068b
:END:
** setup-editor.el
:PROPERTIES:
:ID:       f3eab381-cb88-4e5a-8ff1-24cdb454a744
:END:

*** Package: clean-aindent-mode
:PROPERTIES:
:ID:       f15a2012-97ad-4de7-b7b3-f0cb94dfd9d2
:END:
*** Package: smartparens-mode
:PROPERTIES:
:ID:       4a1b2e00-b23b-4104-b60d-4e44465b858a
:END:

**** Alternatives
:PROPERTIES:
:ID:       4f255ca3-8ad9-4316-a30a-6305c5715377
:END:

*** Package: ace-jump-mode
:PROPERTIES:
:ID:       8c648eca-d6fe-411f-913f-479de76c138a
:END:
*** Package: diff-hl
:PROPERTIES:
:ID:       c308752e-4f95-4409-8921-1e905aa73884
:END:
*** Package: expand-region
:PROPERTIES:
:ID:       6c217940-9a70-4654-8b55-38a3f99e12d3
:END:
*** Package: easy-kill
:PROPERTIES:
:ID:       2d0dc98b-3e5c-403e-9cc4-3dd8934c69cd
:END:
*** Package: highlight-symbol
:PROPERTIES:
:ID:       c8c4279b-263c-4b7c-b370-ff465a357e92
:END:
*** Package: multiselect
:PROPERTIES:
:ID:       684f1185-fc42-42d2-8b26-f9e972f3fb83
:END:
*** Package: pretty-lambdada
:PROPERTIES:
:ID:       9bdee173-eea2-4ffe-9da5-51abcba85d66
:END:
*** Package: hippie-expand
:PROPERTIES:
:ID:       d308b663-9560-4c44-800f-e91757228590
:END:
*** Package: rainbow-mode
:PROPERTIES:
:ID:       2f37c16a-307a-4683-adf5-31a64c0817d5
:END:
*** Package: rawinbow-delimiter
:PROPERTIES:
:ID:       4ea22f1a-a72e-4ee9-b54f-88d866f25666
:END:
*** Package: yasnippet
:PROPERTIES:
:ID:       ea795154-fe90-4c00-9874-6b24a36430f0
:END:
*** Package: vlf
:PROPERTIES:
:ID:       175b96e7-c986-407a-b3d1-98c0a417e5de
:END:
*** Package: zop-to-char
:PROPERTIES:
:ID:       699984dc-fff2-4ded-82d2-a8131ab2e801
:END:
*** Package: undo-tree
:PROPERTIES:
:ID:       e4e1faa4-3fa4-4424-943b-94b626da982e
:END:

*** Package: nyan-mode
:PROPERTIES:
:ID:       77911eb8-f448-475a-a8fb-1546f7b43629
:END:

** setup-ido.el
:PROPERTIES:
:ID:       de428bfd-de8d-4b53-ae08-1b7fd53ff1cb
:END:
** setup-info.el
:PROPERTIES:
:ID:       c94fdf0a-e6ac-49f9-b1cb-611fc9ea4753
:END:

** setup-bookmark
:PROPERTIES:
:ID:       5bde4b05-c051-42a2-bc14-8490728f11fa
:END:
** setup-windows.el
:PROPERTIES:
:ID:       738556d6-e56f-464b-87f6-e1d7878f7d5e
:END:
*** Built-in: winner-mode
:PROPERTIES:
:ID:       d90e7bb7-2470-4bae-a184-9c41009098a1
:END:
*** Package: golden-ratio
:PROPERTIES:
:ID:       55499f58-b666-477d-9e81-99cb92464b7f
:END:
*** Package: policty-witch.el
:PROPERTIES:
:ID:       e75cca87-377e-41eb-9b66-4de60814f490
:END:
** setup-projectile.el
:PROPERTIES:
:ID:       024e5f66-8aaa-4fff-a5bf-27468b9548c3
:END:
** setup-eshell.el
:PROPERTIES:
:ID:       b5869f1c-54df-43e5-8eef-d557ef9fdfca
:END:

** setup-company.el
:PROPERTIES:
:ID:       dcf6c7ae-406a-4436-b09e-b1b5c7b554e2
:END:
** setup-helm.el
:PROPERTIES:
:ID:       a0fbf5d8-af3f-4fd8-a7f4-fff006a49fa8
:END:
*** Package: helm-ls-git
:PROPERTIES:
:ID:       790ab1dd-fe07-4b01-bb03-742586e3f6a1
:END:
*** Package: helm-desbinds
:PROPERTIES:
:ID:       46a860a4-4a29-4199-9069-29dd0cc043ea
:END:
*** Package: helm-projectile
:PROPERTIES:
:ID:       7b823d0a-212d-4277-ace2-bc317e196206
:END:

** setup-helps.el
:PROPERTIES:
:ID:       bf450c25-178f-4ab7-b4c9-4bd3475e375b
:END:
*** Package: discover-my-major
:PROPERTIES:
:ID:       92ff6c99-10a8-4779-a293-48b3c36c16bb
:END:

** Extend built-in functionality
:PROPERTIES:
:ID:       f7f5027d-65aa-4e1c-9c8f-d069297a207e
:END:

* More Emacs Lisp resources
:PROPERTIES:
:ID:       71d59853-4e9e-41d5-a0c7-56000cb01fc3
:END:
